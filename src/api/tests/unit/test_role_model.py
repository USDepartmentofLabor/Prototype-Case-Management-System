from app.models import Role, Permission, User


def test_not_specifying_default_sets_it_to_false(test_client):

    r = Role(name="Test Role")
    assert not r.default


def test_not_passing_permission_sets_permission_to_zero(test_client):
    r = Role(name="Test Role")
    assert r.permission == 0


def test_add_permission(test_client, test_db):
    r = Role(name="Test Role", permissions=0)
    assert not r.has_permission(Permission.SUBMIT_SURVEY)
    r.add_permission(Permission.SUBMIT_SURVEY)
    assert r.has_permission(Permission.SUBMIT_SURVEY)


def test_remove_permission(test_client, test_db):
    r = Role(name="Test Role", permissions=0)
    r.add_permission(Permission.SUBMIT_SURVEY)
    r.add_permission(Permission.READ_SURVEY)
    assert r.has_permission(Permission.SUBMIT_SURVEY)
    r.remove_permission(Permission.SUBMIT_SURVEY)
    assert not r.has_permission(Permission.SUBMIT_SURVEY)


def test_reset_permission_sets_permission_to_zero(test_client, test_db):
    r = Role(name="Test Role", permissions=0)
    r.add_permission(Permission.SUBMIT_SURVEY)
    assert not r.permissions == 0
    r.reset_permissions()
    assert r.permissions == 0


def test_has_permission(test_client, test_db):
    r = Role(name="Test Role", permissions=Permission.SUBMIT_SURVEY)
    assert r.has_permission(Permission.SUBMIT_SURVEY)


def test_does_not_have_permission(test_client, test_db):
    r = Role(name="Test Role", permissions=Permission.SUBMIT_SURVEY)
    assert not r.has_permission(Permission.READ_SURVEY)


def test_default_user_role(test_client, test_db):
    u = User(email='user1@example.com', username='user1', password='cat')
    assert not u.can(Permission.ADMIN)
    assert not u.can(Permission.INSTALL_SYSTEM)
    assert not u.can(Permission.CONFIGURE_SYSTEM)
    assert not u.can(Permission.CREATE_ACCOUNT)
    assert u.can(Permission.READ_ACCOUNT)
    assert u.can(Permission.UPDATE_ACCOUNT)
    assert not u.can(Permission.DELETE_ACCOUNT)
    assert not u.can(Permission.CREATE_ROLE)
    assert not u.can(Permission.READ_ROLE)
    assert not u.can(Permission.UPDATE_ROLE)
    assert not u.can(Permission.DELETE_ROLE)
    assert not u.can(Permission.CREATE_SURVEY)
    assert u.can(Permission.READ_SURVEY)
    assert not u.can(Permission.UPDATE_SURVEY)
    assert not u.can(Permission.DELETE_SURVEY)
    assert not u.can(Permission.SUBMIT_SURVEY)
    assert not u.can(Permission.ARCHIVE_SURVEY)
    assert u.can(Permission.READ_REPORT)
    assert not u.can(Permission.CREATE_CASE_DEFINITION)
    assert not u.can(Permission.READ_CASE_DEFINITION)
    assert not u.can(Permission.UPDATE_CASE_DEFINITION)
    assert not u.can(Permission.DELETE_CASE_DEFINITION)
    assert not u.can(Permission.CREATE_CASE)
    assert not u.can(Permission.UPDATE_CASE)
    assert u.can(Permission.READ_CASE)
    assert not u.can(Permission.DELETE_CASE)
    assert not u.can(Permission.CREATE_PROJECT)
    assert u.can(Permission.READ_PROJECT)
    assert not u.can(Permission.UPDATE_PROJECT)
    assert not u.can(Permission.DELETE_PROJECT)
    assert not u.can(Permission.CREATE_ACTIVITY_DEFINITION)
    assert not u.can(Permission.READ_ACTIVITY_DEFINITION)
    assert not u.can(Permission.UPDATE_ACTIVITY_DEFINITION)
    assert not u.can(Permission.DELETE_ACTIVITY_DEFINITION)
    assert not u.can(Permission.CREATE_ACTIVITY)
    assert u.can(Permission.READ_ACTIVITY)
    assert not u.can(Permission.UPDATE_ACTIVITY)
    assert not u.can(Permission.DELETE_ACTIVITY)
    assert not u.can(Permission.ASSIGN_TO_CASE)
    assert u.can(Permission.ASSIGNABLE_TO_CASE)


def test_admin_role(test_client, test_db):
    r = Role.query.filter_by(name='Admin').first()
    u = User(email='john@example.com', password='cat', role=r)
    assert u.is_admin()
    assert u.can(Permission.ADMIN)
    assert u.can(Permission.INSTALL_SYSTEM)
    assert u.can(Permission.CONFIGURE_SYSTEM)
    assert u.can(Permission.CREATE_ACCOUNT)
    assert u.can(Permission.READ_ACCOUNT)
    assert u.can(Permission.UPDATE_ACCOUNT)
    assert u.can(Permission.DELETE_ACCOUNT)
    assert u.can(Permission.CREATE_ROLE)
    assert u.can(Permission.READ_ROLE)
    assert u.can(Permission.UPDATE_ROLE)
    assert u.can(Permission.DELETE_ROLE)
    assert u.can(Permission.CREATE_SURVEY)
    assert u.can(Permission.READ_SURVEY)
    assert u.can(Permission.UPDATE_SURVEY)
    assert u.can(Permission.DELETE_SURVEY)
    assert u.can(Permission.SUBMIT_SURVEY)
    assert u.can(Permission.ARCHIVE_SURVEY)
    assert u.can(Permission.READ_REPORT)
    assert u.can(Permission.CREATE_CASE_DEFINITION)
    assert u.can(Permission.READ_CASE_DEFINITION)
    assert u.can(Permission.UPDATE_CASE_DEFINITION)
    assert u.can(Permission.DELETE_CASE_DEFINITION)
    assert u.can(Permission.CREATE_CASE)
    assert u.can(Permission.UPDATE_CASE)
    assert u.can(Permission.READ_CASE)
    assert u.can(Permission.DELETE_CASE)
    assert u.can(Permission.CREATE_PROJECT)
    assert u.can(Permission.READ_PROJECT)
    assert u.can(Permission.UPDATE_PROJECT)
    assert u.can(Permission.DELETE_PROJECT)
    assert u.can(Permission.CREATE_ACTIVITY_DEFINITION)
    assert u.can(Permission.READ_ACTIVITY_DEFINITION)
    assert u.can(Permission.UPDATE_ACTIVITY_DEFINITION)
    assert u.can(Permission.DELETE_ACTIVITY_DEFINITION)
    assert u.can(Permission.CREATE_ACTIVITY)
    assert u.can(Permission.READ_ACTIVITY)
    assert u.can(Permission.UPDATE_ACTIVITY)
    assert u.can(Permission.DELETE_ACTIVITY)
    assert u.can(Permission.ASSIGN_TO_CASE)
    assert u.can(Permission.ASSIGNABLE_TO_CASE)


def test_project_manager_role(test_client, test_db):
    r = Role.query.filter_by(name='Project Manager').first()
    u = User(email='deadleopard@example.com', password='cat', role=r)
    assert not u.can(Permission.ADMIN)
    assert not u.can(Permission.INSTALL_SYSTEM)
    assert u.can(Permission.CONFIGURE_SYSTEM)
    assert not u.can(Permission.CREATE_ACCOUNT)
    assert u.can(Permission.READ_ACCOUNT)
    assert u.can(Permission.UPDATE_ACCOUNT)
    assert not u.can(Permission.DELETE_ACCOUNT)
    assert not u.can(Permission.CREATE_ROLE)
    assert not u.can(Permission.READ_ROLE)
    assert not u.can(Permission.UPDATE_ROLE)
    assert not u.can(Permission.DELETE_ROLE)
    assert u.can(Permission.CREATE_SURVEY)
    assert u.can(Permission.READ_SURVEY)
    assert u.can(Permission.UPDATE_SURVEY)
    assert u.can(Permission.DELETE_SURVEY)
    assert u.can(Permission.SUBMIT_SURVEY)
    assert u.can(Permission.ARCHIVE_SURVEY)
    assert u.can(Permission.READ_REPORT)
    assert u.can(Permission.CREATE_CASE_DEFINITION)
    assert u.can(Permission.READ_CASE_DEFINITION)
    assert u.can(Permission.UPDATE_CASE_DEFINITION)
    assert u.can(Permission.DELETE_CASE_DEFINITION)
    assert u.can(Permission.CREATE_CASE)
    assert u.can(Permission.UPDATE_CASE)
    assert u.can(Permission.READ_CASE)
    assert u.can(Permission.DELETE_CASE)
    assert u.can(Permission.CREATE_PROJECT)
    assert u.can(Permission.READ_PROJECT)
    assert u.can(Permission.UPDATE_PROJECT)
    assert u.can(Permission.DELETE_PROJECT)
    assert u.can(Permission.CREATE_ACTIVITY_DEFINITION)
    assert u.can(Permission.READ_ACTIVITY_DEFINITION)
    assert u.can(Permission.UPDATE_ACTIVITY_DEFINITION)
    assert u.can(Permission.DELETE_ACTIVITY_DEFINITION)
    assert u.can(Permission.CREATE_ACTIVITY)
    assert u.can(Permission.READ_ACTIVITY)
    assert u.can(Permission.UPDATE_ACTIVITY)
    assert u.can(Permission.DELETE_ACTIVITY)
    assert u.can(Permission.ASSIGN_TO_CASE)
    assert u.can(Permission.ASSIGNABLE_TO_CASE)


def test_data_collector_role(test_client, test_db):
    r = Role.query.filter_by(name='Data Collector').first()
    u = User(email='snoopy@example.com', password='dog', role=r)
    assert not u.can(Permission.ADMIN)
    assert not u.can(Permission.INSTALL_SYSTEM)
    assert not u.can(Permission.CONFIGURE_SYSTEM)
    assert not u.can(Permission.CREATE_ACCOUNT)
    assert u.can(Permission.READ_ACCOUNT)
    assert u.can(Permission.UPDATE_ACCOUNT)
    assert not u.can(Permission.DELETE_ACCOUNT)
    assert not u.can(Permission.CREATE_ROLE)
    assert not u.can(Permission.READ_ROLE)
    assert not u.can(Permission.UPDATE_ROLE)
    assert not u.can(Permission.DELETE_ROLE)
    assert not u.can(Permission.CREATE_SURVEY)
    assert u.can(Permission.READ_SURVEY)
    assert u.can(Permission.UPDATE_SURVEY)
    assert not u.can(Permission.DELETE_SURVEY)
    assert u.can(Permission.SUBMIT_SURVEY)
    assert not u.can(Permission.ARCHIVE_SURVEY)
    assert not u.can(Permission.READ_REPORT)
    assert not u.can(Permission.CREATE_CASE_DEFINITION)
    assert not u.can(Permission.READ_CASE_DEFINITION)
    assert not u.can(Permission.UPDATE_CASE_DEFINITION)
    assert not u.can(Permission.DELETE_CASE_DEFINITION)
    assert u.can(Permission.CREATE_CASE)
    assert u.can(Permission.UPDATE_CASE)
    assert u.can(Permission.READ_CASE)
    assert not u.can(Permission.DELETE_CASE)
    assert not u.can(Permission.CREATE_PROJECT)
    assert u.can(Permission.READ_PROJECT)
    assert not u.can(Permission.UPDATE_PROJECT)
    assert not u.can(Permission.DELETE_PROJECT)
    assert not u.can(Permission.CREATE_ACTIVITY_DEFINITION)
    assert not u.can(Permission.READ_ACTIVITY_DEFINITION)
    assert not u.can(Permission.UPDATE_ACTIVITY_DEFINITION)
    assert not u.can(Permission.DELETE_ACTIVITY_DEFINITION)
    assert u.can(Permission.CREATE_ACTIVITY)
    assert u.can(Permission.READ_ACTIVITY)
    assert u.can(Permission.UPDATE_ACTIVITY)
    assert not u.can(Permission.DELETE_ACTIVITY)
    assert not u.can(Permission.ASSIGN_TO_CASE)
    assert u.can(Permission.ASSIGNABLE_TO_CASE)


def test_data_reader(test_client, test_db):
    r = Role.query.filter_by(name='Data Reader').first()
    u = User(email='drj@example.com', password='bball', role=r)
    assert not u.can(Permission.ADMIN)
    assert not u.can(Permission.INSTALL_SYSTEM)
    assert not u.can(Permission.CONFIGURE_SYSTEM)
    assert not u.can(Permission.CREATE_ACCOUNT)
    assert u.can(Permission.READ_ACCOUNT)
    assert u.can(Permission.UPDATE_ACCOUNT)
    assert not u.can(Permission.DELETE_ACCOUNT)
    assert not u.can(Permission.CREATE_ROLE)
    assert not u.can(Permission.READ_ROLE)
    assert not u.can(Permission.UPDATE_ROLE)
    assert not u.can(Permission.DELETE_ROLE)
    assert not u.can(Permission.CREATE_SURVEY)
    assert u.can(Permission.READ_SURVEY)
    assert not u.can(Permission.UPDATE_SURVEY)
    assert not u.can(Permission.DELETE_SURVEY)
    assert not u.can(Permission.SUBMIT_SURVEY)
    assert not u.can(Permission.ARCHIVE_SURVEY)
    assert u.can(Permission.READ_REPORT)
    assert not u.can(Permission.CREATE_CASE_DEFINITION)
    assert not u.can(Permission.READ_CASE_DEFINITION)
    assert not u.can(Permission.UPDATE_CASE_DEFINITION)
    assert not u.can(Permission.DELETE_CASE_DEFINITION)
    assert not u.can(Permission.CREATE_CASE)
    assert not u.can(Permission.UPDATE_CASE)
    assert u.can(Permission.READ_CASE)
    assert not u.can(Permission.DELETE_CASE)
    assert not u.can(Permission.CREATE_PROJECT)
    assert u.can(Permission.READ_PROJECT)
    assert not u.can(Permission.UPDATE_PROJECT)
    assert not u.can(Permission.DELETE_PROJECT)
    assert not u.can(Permission.CREATE_ACTIVITY_DEFINITION)
    assert not u.can(Permission.READ_ACTIVITY_DEFINITION)
    assert not u.can(Permission.UPDATE_ACTIVITY_DEFINITION)
    assert not u.can(Permission.DELETE_ACTIVITY_DEFINITION)
    assert not u.can(Permission.CREATE_ACTIVITY)
    assert u.can(Permission.READ_ACTIVITY)
    assert not u.can(Permission.UPDATE_ACTIVITY)
    assert not u.can(Permission.DELETE_ACTIVITY)
    assert not u.can(Permission.ASSIGN_TO_CASE)
    assert u.can(Permission.ASSIGNABLE_TO_CASE)
