import pytest

"""
These tests test that all the endpoints that require a JWT token do so.
"""

jwt_test_cases = [
    {
        'id': 'main-get-configuration',
        'url': "/configuration",
        'method': 'GET'
    }, {
        'id': 'main-get-lookups',
        'url': "/lookups",
        'method': 'GET'
    }, {
        'id': 'main-get-secure',
        'url': "/secure",
        'method': 'GET'
    }, {
        'id': 'main-get-deleted',
        'url': '/deleted',
        'method': 'GET'
    }, {
        'id': 'main-get-dashboards',
        'url': '/dashboards',
        'method': 'GET'
    }, {
        'id': 'main-put-dashboards-set-default',
        'url': '/dashboards/set-default',
        'method': 'PUT'
    }, {
        'id': 'main-get-dashboards-get-default',
        'url': '/dashboards/get-default',
        'method': 'GET'
    }, {
        'id': 'auth-post-logout',
        'url': "/auth/logout",
        'method': 'POST'
    }, {
        'id': 'survey-get-surveys',
        'url': "/surveys/",
        'method': 'GET'
    }, {
        'id': 'survey-get-survey',
        'url': "/surveys/99",
        'method': 'GET'
    }, {
        'id': 'survey-put-survey',
        'url': "/surveys/99",
        'method': 'PUT'
    }, {
        'id': 'survey-get-survey-responses',
        'url': "/surveys/99/responses",
        'method': 'GET'
    }, {
        'id': 'survey-get-survey-response',
        'url': '/surveys/99/responses/99',
        'method': 'GET'
    }, {
        'id': 'survey-post-survey',
        'url': "/surveys/",
        'method': 'POST'
    }, {
        'id': 'survey-post-survey-response',
        'url': "/surveys/99/responses",
        'method': 'POST'
    }, {
        'id': 'survey-put-survey-response',
        'url': "/surveys/99/responses/99",
        'method': 'PUT'
    }, {
        'id': 'survey-delete-survey',
        'url': "/surveys/99",
        'method': 'DELETE'
    }, {
        'id': 'survey-delete-survey-response',
        'url': "/surveys/99/responses/99",
        'method': 'DELETE'
    }, {
        'id': 'users-get-users',
        'url': "/users/",
        'method': 'GET'
    }, {
        'id': 'users-add-user',
        'url': "/users/",
        'method': 'POST'
    }, {
        'id': 'users-change-password',
        'url': "/users/1/change-password",
        'method': 'POST'
    }, {
        'id': 'users-delete-user',
        'url': "/users/1",
        'method': 'DELETE'
    }, {
        'id': 'users-put-user',
        'url': "/users/1",
        'method': 'PUT'
    }, {
        'id': 'users-get-user',
        'url': "/users/1",
        'method': 'GET'
    }, {
        'id': 'users-resend-welcome',
        'url': '/users/1/resend-welcome',
        'method': 'POST'
    }, {
        'id': 'case-definitions-create-def',
        'url': '/case_definitions/',
        'method': 'POST'
    }, {
        'id': 'case-definitions-get-all-def',
        'url': '/case_definitions/',
        'method': 'GET'
    }, {
        'id': 'case-definitions-get-def',
        'url': '/case_definitions/99',
        'method': 'GET'
    }, {
        'id': 'case-definitions-post-custom_field',
        'url': '/case_definitions/99/custom_fields',
        'method': 'POST'
    }, {
        'id': 'case-definitions-get-custom_fields',
        'url': '/case_definitions/99/custom_fields',
        'method': 'GET'
    }, {
        'id': 'case-definitions-get-custom_field',
        'url': '/case_definitions/99/custom_fields/99',
        'method': 'GET'
    }, {
        'id': 'case-definitions-put-custom_field',
        'url': '/case_definitions/99/custom_fields/99',
        'method': 'PUT'
    }, {
        'id': 'case-definitions-delete-custom_field',
        'url': '/case_definitions/99/custom_fields/99',
        'method': 'DELETE'
    }, {
        'id': 'cases-create-case',
        'url': '/case_definitions/99/cases',
        'method': 'POST'
    }, {
        'id': 'cases-get-cases',
        'url': '/cases',
        'method': 'GET'
    }, {
        'id': 'cases-get-case',
        'url': '/cases/99',
        'method': 'GET'
    }, {
        'id': 'cases-put-case',
        'url': '/cases/99',
        'method': 'PUT'
    }, {
        'id': 'cases-delete-case',
        'url': '/cases/99',
        'method': 'DELETE'
    }, {
        'id': 'cases-get-custom_fields',
        'url': '/cases/99/custom_fields',
        'method': 'GET'
    }, {
        'id': 'cases-get-custom_field',
        'url': '/cases/99/custom_fields/99',
        'method': 'GET'
    }, {
        'id': 'cases-put-custom_field',
        'url': '/cases/99/custom_fields/99',
        'method': 'PUT'
    }, {
        'id': 'project-create-project',
        'url': '/project',
        'method': 'POST'
    }, {
        'id': 'project-get-project',
        'url': '/project',
        'method': 'GET'
    }, {
        'id': 'project-put-project',
        'url': '/project',
        'method': 'PUT'
    }, {
        'id': 'project-delete-project',
        'url': '/project',
        'method': 'DELETE'
    }, {
        'id': 'activity_definitions-create-activity_definitions',
        'url': '/activity_definitions',
        'method': 'POST'
    }, {
        'id': 'activity_definitions-get-all-activity_definitions',
        'url': '/activity_definitions',
        'method': 'GET'
    }, {
        'id': 'activity_definitions-get-activity_definitions',
        'url': '/activity_definitions/99',
        'method': 'GET'
    }, {
        'id': 'activity_definitions-put-activity_definitions',
        'url': '/activity_definitions/99',
        'method': 'PUT'
    }, {
        'id': 'activity_definitions-delete-activity_definitions',
        'url': '/activity_definitions/99',
        'method': 'DELETE'
    }, {
        'id': 'activities-post',
        'url': '/activities',
        'method': 'POST'
    }, {
        'id': 'activities-get-all',
        'url': '/activities',
        'method': 'GET'
    }, {
        'id': 'activities-get',
        'url': '/activities/99',
        'method': 'GET'
    }, {
        'id': 'activities-put',
        'url': '/activities/99',
        'method': 'PUT'
    }, {
        'id': 'activities-delete',
        'url': '/activities/99',
        'method': 'DELETE'
    }, {
        'id': 'activities-get-custom_fields',
        'url': '/activities/99/custom_fields',
        'method': 'GET'
    }, {
        'id': 'activities-get-custom_field',
        'url': '/activities/99/custom_fields/99',
        'method': 'GET'
    }, {
        'id': 'activities-put-custom_field',
        'url': '/activities/99/custom_fields/99',
        'method': 'PUT'
    }, {
        'id': 'activities-post-file',
        'url': '/activities/99/add_file',
        'method': 'POST'
    }, {
        'id': 'activities-get-file',
        'url': '/activities/files/99',
        'method': 'GET'
    }, {
        'id': 'activities-delete-file',
        'url': '/activities/files/99',
        'method': 'DELETE'
    }, {
        'id': 'activities-download-file',
        'url': '/activities/files/99/download',
        'method': 'GET'
    }, {
        'id': 'activities-post-note',
        'url': '/activities/99/notes',
        'method': 'POST'
    }, {
        'id': 'activities-get-notes',
        'url': '/activities/99/notes',
        'method': 'GET'
    }, {
        'id': 'activities-get-note',
        'url': '/activities/99/notes/99',
        'method': 'GET'
    }, {
        'id': 'activities-put-note',
        'url': '/activities/99/notes/99',
        'method': 'PUT'
    }, {
        'id': 'activities-delete-note',
        'url': '/activities/99/notes/99',
        'method': 'DELETE'
    }
]

jwt_test_cases_ids = [case['id'] for case in jwt_test_cases]


@pytest.mark.parametrize('test_case', jwt_test_cases, ids=jwt_test_cases_ids)
def test_access_fails_without_jwt(test_client, test_case):
    if test_case['method'] == 'POST':
        response = test_client.post(test_case['url'])
    elif test_case['method'] == 'PUT':
        response = test_client.put(test_case['url'])
    elif test_case['method'] == 'DELETE':
        response = test_client.delete(test_case['url'])
    else:
        response = test_client.get(test_case['url'])
    assert response.status_code == 401
    json_data = response.get_json()
    assert json_data['message'] == 'Missing Authorization Header'
